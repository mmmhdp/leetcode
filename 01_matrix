class Solution:
    
    
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:    
        
        def is_valid_cell(i,j):
            if i<0 or i>len(mat)-1 or j<0 or j>len(mat[0])-1:
                return False
            return True  

        queue_of_zeros, visited = deque(), set()
        
        for i in range(len(mat)):
            for j in range(len(mat[0])):
                if mat[i][j] == 0:
                    queue_of_zeros.append([i,j])
                    visited.add((i,j))
        
        distance = 1
        flow_q = queue_of_zeros

        while flow_q:
            q_size = len(flow_q)
            
            for _ in range(q_size):
                i,j = flow_q.popleft()
                around = [[i,j+1],[i+1,j],[i,j-1],[i-1,j]]
                
                for a_row, a_col in around:
                    new_row, new_col = a_row, a_col
                    
                    if (new_row, new_col) not in visited and is_valid_cell(new_row,new_col):
                        mat[new_row][new_col] = distance
                        flow_q.append([new_row, new_col])
                        visited.add((new_row, new_col))

            distance += 1

        return mat
