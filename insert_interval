import copy


class Solution:
    
    
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        result = []
        
        #isInserted flag for newInterval insertion.
        status = -1

        left = newInterval[0]
        right = newInterval[1]

        for interval in intervals:

            
            # if newInterval goes after curr inteval,
            # we just append curr interval and go to the next one
            
            if interval[1] < left:
                result.append(interval)

            # if newInterval goes before curr,
            # we add preconfigured(maybe merged)
            # newInterval and curr interval after.
            # Flag changed to 0, means we done.
            # Just append rest of the intervals after. 
        
            elif interval[0] > right:
                if status != 0:
                    result.append([left,right])
                    status = 0
                ind = intervals.index(interval)
                result = result + intervals[ind:]
                break

            # if interception is existed,
            # we update left and right 
            # border and goes to the next interval. 
            else:
                left = min(left, interval[0])
                right = max(right, interval[1])

                status = -1

        # if status still !=0, we go through 
        # intervals, that means, newInterval 
        # goes after all of it and we 
        # append, if nessacery.
        if status != 0:
            result.append([left,right]) 
        
        return result
        
