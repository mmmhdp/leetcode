# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.max_d = 1

    def dfs_diff(self, root: Optional[TreeNode])-> int:
        
        if not root: 
            return 0
        if not root.left and not root.right: 
            return 0

        l = self.dfs_diff(root.left)
        r = self.dfs_diff(root.right)
        
        L = l+1 if root.left else 0
        R = r+1 if root.right else 0
        self.max_d = L+R if L+R > self.max_d else self.max_d
        return max(L,R)

        

    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        if not root.left and not root.right: 
            return 0
        self.dfs_diff(root)
        return self.max_d
