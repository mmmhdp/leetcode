class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:

        res = set()

        pos = []
        neg = []
        zer = []

        nums.sort()

        for ind, el in enumerate(nums):
            if el == 0:
                zer.append(el)
            elif el > 0:
                pos.append(el)
            else:
                neg.append(el)

        if len(zer) > 0:
            for ind, el in enumerate(neg):
                if -el in pos and zer:
                    neg_part = neg.pop(ind)
                    pos_part = pos.pop(pos.index(-el))
                    zero_part = zer.pop()

                    res.add(
                        tuple(sorted([neg_part, pos_part, zero_part])
                         )
                    )

        while len(zer) >= 3:
            res.add((0, 0, 0))
            zer = zer[3:]

        for i in range(len(nums) - 1 - 1):
            j = i + 1
            k = len(nums) - 1

            first_part = nums[i]

            used_indexes = set()
            while j < k:
                second_part = nums[j]
                third_part = nums[k]

                curr_sum = first_part + second_part + third_part
                if curr_sum == 0 and i not in used_indexes and k not in used_indexes:
                    used_indexes.add(j)
                    used_indexes.add(k)

                    res.add(
                        tuple(sorted([first_part, second_part, third_part]))
                    )
                elif curr_sum < 0:
                    j += 1
                elif curr_sum > 0:
                    k -= 1
                else:
                    if j in used_indexes:
                        j += 1
                    if k in used_indexes:
                        k -= 1

        return list(res)
